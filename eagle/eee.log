[2024-05-15 10:43:39,828] [INFO] [real_accelerator.py:191:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[TensorRT-LLM] TensorRT-LLM version: 0.8.0loading tokenizer
loading model
[INFO]: vision_tower:  /lpai/volumes/cloudmodel-muses/weidafeng/pretrained_models/huggingface_converted/openai/clip-vit-large-patch14-336
[INFO]: using siglip encoder siglip
prompt: ('[INST] <image>\n你是一个能够分析理解各种复杂驾驶场景的智能驾驶系统.请根据图片从以下场景标签中选择所有符合当前场景的标签,满足条件的场景必须是对自车行车决策会产生影响的场景:[无灯路,坑洼路,泥泞路,事故,道路施工,临时红绿灯],场景标签可以有一个到多个,以列表形式表达,顺序无关.还要描述当前驾驶场景的时间,黑天或白天,描述道路类型,前方备选车道和自车所在的车道位置.备选车道代表自车可以变道的目标车道,以列表形式表达,顺序为左邻车道,自车车道,右邻车道,例如[无,普通,公交]代表前方没有左邻车道,自车车道是普通车道,右邻是公交车道. 自车所在车道分为左侧,中间,右侧,单车道,无,代表自车在所行驶方向道路的相对位置. 最后用一句话描述当前场景并给出应对当前驾驶场景的驾驶建议. 每个维度信息都用key:value对形式表达. [/INST]',)
before self.sequence_length_buffer tensor([1], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([821], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([832], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([833], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([834], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([835], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([836], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([837], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([838], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([839], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([840], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([841], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([842], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([843], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([844], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([845], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([846], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([847], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([848], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([849], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([850], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([851], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([852], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([853], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([854], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([855], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([856], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([857], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([858], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([859], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([860], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([861], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([862], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([863], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([864], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([865], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([866], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([867], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([868], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([869], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([870], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([871], device='cuda:0', dtype=torch.int32)
self.total_time 0.0
total_time 1.5370771884918213
Step 0 : 2.8708109855651855 s
Outputs: ['场景:[无灯路];时间:无;道路类型:无;备选车道:[无,无,无];自车车道:无;文本:车辆未处于任何车道中;前方道路光线昏暗,车辆将慢速行驶,避免发生急刹. ']
outputs.numel(): 59
Total new token: tensor([[59]], device='cuda:0', dtype=torch.int32)
Avg acc len: 0
prompt: ('[INST] <image>\n你是一个能够分析理解各种复杂驾驶场景的智能驾驶系统.请根据图片从以下场景标签中选择所有符合当前场景的标签,满足条件的场景必须是对自车行车决策会产生影响的场景:[无灯路,坑洼路,泥泞路,事故,道路施工,临时红绿灯],场景标签可以有一个到多个,以列表形式表达,顺序无关.还要描述当前驾驶场景的时间,黑天或白天,描述道路类型,前方备选车道和自车所在的车道位置.备选车道代表自车可以变道的目标车道,以列表形式表达,顺序为左邻车道,自车车道,右邻车道,例如[无,普通,公交]代表前方没有左邻车道,自车车道是普通车道,右邻是公交车道. 自车所在车道分为左侧,中间,右侧,单车道,无,代表自车在所行驶方向道路的相对位置. 最后用一句话描述当前场景并给出应对当前驾驶场景的驾驶建议. 每个维度信息都用key:value对形式表达. [/INST]',)
before self.sequence_length_buffer tensor([1], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([820], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([831], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([832], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([833], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([834], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([835], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([836], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([837], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([838], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([839], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([840], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([841], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([842], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([843], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([844], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([845], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([846], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([847], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([848], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([849], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([850], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([851], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([852], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([853], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([854], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([855], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([856], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([857], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([858], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([859], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([860], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([861], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([862], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([863], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([864], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([865], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([866], device='cuda:0', dtype=torch.int32)
self.total_time 0.0
total_time 1.4079251289367676
Step 1 : 3.1850075721740723 s
Outputs: ['场景:[道路施工];时间:白天;道路类型:无;备选车道:[无,无,无];自车车道:无;文本:车辆未处于任何车道中;前方施工,车辆将慢速行驶,避免急刹车. ']
outputs.numel(): 54
Total new token: tensor([[54]], device='cuda:0', dtype=torch.int32)
Avg acc len: 0
prompt: ('[INST] <image>\n你是一个能够分析理解各种复杂驾驶场景的智能驾驶系统.请根据图片从以下场景标签中选择所有符合当前场景的标签,满足条件的场景必须是对自车行车决策会产生影响的场景:[无灯路,坑洼路,泥泞路,事故,道路施工,临时红绿灯],场景标签可以有一个到多个,以列表形式表达,顺序无关.还要描述当前驾驶场景的时间,黑天或白天,描述道路类型,前方备选车道和自车所在的车道位置.备选车道代表自车可以变道的目标车道,以列表形式表达,顺序为左邻车道,自车车道,右邻车道,例如[无,普通,公交]代表前方没有左邻车道,自车车道是普通车道,右邻是公交车道. 自车所在车道分为左侧,中间,右侧,单车道,无,代表自车在所行驶方向道路的相对位置. 最后用一句话描述当前场景并给出应对当前驾驶场景的驾驶建议. 每个维度信息都用key:value对形式表达. [/INST]',)
before self.sequence_length_buffer tensor([1], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([820], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([831], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([832], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([833], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([834], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([835], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([836], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([837], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([838], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([839], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([840], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([841], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([842], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([843], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([844], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([845], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([846], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([847], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([848], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([849], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([850], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([851], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([852], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([853], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([854], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([855], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([856], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([857], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([858], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([859], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([860], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([861], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([862], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([863], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([864], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([865], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([866], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([867], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([868], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([869], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([870], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([871], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([872], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([873], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([874], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([875], device='cuda:0', dtype=torch.int32)
self.total_time 0.0
total_time 1.705075740814209
Step 2 : 2.935206651687622 s
Outputs: ['场景:[道路施工];时间:白天;道路类型:无;备选车道:[普通,普通,无];自车车道:右侧;文本:车辆位于右侧车道,可以保持当前车道行驶或者向左变道;车辆因前方施工而慢速行驶,避免急刹车. ']
outputs.numel(): 63
Total new token: tensor([[63]], device='cuda:0', dtype=torch.int32)
Avg acc len: 0
avg_acc_lens: 0.0
prompt: ('[INST] <image>\n你是一个能够分析理解各种复杂驾驶场景的智能驾驶系统.请根据图片从以下场景标签中选择所有符合当前场景的标签,满足条件的场景必须是对自车行车决策会产生影响的场景:[无灯路,坑洼路,泥泞路,事故,道路施工,临时红绿灯],场景标签可以有一个到多个,以列表形式表达,顺序无关.还要描述当前驾驶场景的时间,黑天或白天,描述道路类型,前方备选车道和自车所在的车道位置.备选车道代表自车可以变道的目标车道,以列表形式表达,顺序为左邻车道,自车车道,右邻车道,例如[无,普通,公交]代表前方没有左邻车道,自车车道是普通车道,右邻是公交车道. 自车所在车道分为左侧,中间,右侧,单车道,无,代表自车在所行驶方向道路的相对位置. 最后用一句话描述当前场景并给出应对当前驾驶场景的驾驶建议. 每个维度信息都用key:value对形式表达. [/INST]',)
before self.sequence_length_buffer tensor([1], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([819], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([830], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([831], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([832], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([833], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([834], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([835], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([836], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([837], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([838], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([839], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([840], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([841], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([842], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([843], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([844], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([845], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([846], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([847], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([848], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([849], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([850], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([851], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([852], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([853], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([854], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([855], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([856], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([857], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([858], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([859], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([860], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([861], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([862], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([863], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([864], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([865], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([866], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([867], device='cuda:0', dtype=torch.int32)
self.total_time 0.0
total_time 1.3527634143829346
Step 3 : 2.3692924976348877 s
Outputs: ['场景:[事故];时间:白天;道路类型:无;备选车道:[无,无,无];自车车道:无;文本:车辆未处于任何车道中;前方发生事故,车辆将慢速行驶,预防急刹的情况. ']
outputs.numel(): 55
Total new token: tensor([[55]], device='cuda:0', dtype=torch.int32)
Avg acc len: 0
avg_acc_lens: 0.0
prompt: ('[INST] <image>\n你是一个能够分析理解各种复杂驾驶场景的智能驾驶系统.请根据图片从以下场景标签中选择所有符合当前场景的标签,满足条件的场景必须是对自车行车决策会产生影响的场景:[无灯路,坑洼路,泥泞路,事故,道路施工,临时红绿灯],场景标签可以有一个到多个,以列表形式表达,顺序无关.还要描述当前驾驶场景的时间,黑天或白天,描述道路类型,前方备选车道和自车所在的车道位置.备选车道代表自车可以变道的目标车道,以列表形式表达,顺序为左邻车道,自车车道,右邻车道,例如[无,普通,公交]代表前方没有左邻车道,自车车道是普通车道,右邻是公交车道. 自车所在车道分为左侧,中间,右侧,单车道,无,代表自车在所行驶方向道路的相对位置. 然后判断当前图片中是否存在临时红绿灯.最后用一句话描述当前场景并给出应对当前驾驶场景的驾驶建议. 每个维度信息都用key:value对形式表达. [/INST]',)
before self.sequence_length_buffer tensor([1], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([835], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([846], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([847], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([848], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([849], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([850], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([851], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([852], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([853], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([854], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([855], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([856], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([857], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([858], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([859], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([860], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([861], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([862], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([863], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([864], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([865], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([866], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([867], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([868], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([869], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([870], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([871], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([872], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([873], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([874], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([875], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([876], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([877], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([878], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([879], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([880], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([881], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([882], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([883], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([884], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([885], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([886], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([887], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([888], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([889], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([890], device='cuda:0', dtype=torch.int32)
self.total_time 0.0
total_time 1.7720119953155518
Step 4 : 3.0685129165649414 s
Outputs: ['场景:[临时红绿灯];时间:白天;道路类型:无;备选车道:[普通,普通,普通];自车车道:中间;临时红绿灯:是;文本:车辆位于中间车道,可向左或右换道;该路口设置了一个临时的交通灯. ']
outputs.numel(): 65
Total new token: tensor([[65]], device='cuda:0', dtype=torch.int32)
Avg acc len: 0
avg_acc_lens: 0.0
prompt: ('[INST] <image>\n你是一个能够分析理解各种复杂驾驶场景的智能驾驶系统.请根据图片从以下场景标签中选择所有符合当前场景的标签,满足条件的场景必须是对自车行车决策会产生影响的场景:[无灯路,坑洼路,泥泞路,事故,道路施工,临时红绿灯],场景标签可以有一个到多个,以列表形式表达,顺序无关.还要描述当前驾驶场景的时间,黑天或白天,描述道路类型,前方备选车道和自车所在的车道位置.备选车道代表自车可以变道的目标车道,以列表形式表达,顺序为左邻车道,自车车道,右邻车道,例如[无,普通,公交]代表前方没有左邻车道,自车车道是普通车道,右邻是公交车道. 自车所在车道分为左侧,中间,右侧,单车道,无,代表自车在所行驶方向道路的相对位置. 然后判断当前图片中是否存在临时红绿灯.最后用一句话描述当前场景并给出应对当前驾驶场景的驾驶建议. 每个维度信息都用key:value对形式表达. [/INST]',)
before self.sequence_length_buffer tensor([1], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([835], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([846], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([847], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([848], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([849], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([850], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([851], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([852], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([853], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([854], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([855], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([856], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([857], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([858], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([859], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([860], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([861], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([862], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([863], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([864], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([865], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([866], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([867], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([868], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([869], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([870], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([871], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([872], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([873], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([874], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([875], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([876], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([877], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([878], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([879], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([880], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([881], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([882], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([883], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([884], device='cuda:0', dtype=torch.int32)
self.total_time 0.0
total_time 1.5149483680725098
Step 5 : 2.668975830078125 s
Outputs: ['场景:[临时红绿灯];时间:无;道路类型:无;备选车道:[无,无,无];自车车道:无;临时红绿灯:是;文本:车辆未处于任何车道中;该路口设置了一个临时的交通灯. ']
outputs.numel(): 59
Total new token: tensor([[59]], device='cuda:0', dtype=torch.int32)
Avg acc len: 0
avg_acc_lens: 0.0
prompt: ('[INST] <image>\n你是一个能够分析理解各种复杂驾驶场景的智能驾驶系统.请根据图片从以下场景标签中选择所有符合当前场景的标签,满足条件的场景必须是对自车行车决策会产生影响的场景:[无灯路,坑洼路,泥泞路,事故,道路施工,临时红绿灯],场景标签可以有一个到多个,以列表形式表达,顺序无关.还要描述当前驾驶场景的时间,黑天或白天,描述道路类型,前方备选车道和自车所在的车道位置.备选车道代表自车可以变道的目标车道,以列表形式表达,顺序为左邻车道,自车车道,右邻车道,例如[无,普通,公交]代表前方没有左邻车道,自车车道是普通车道,右邻是公交车道. 自车所在车道分为左侧,中间,右侧,单车道,无,代表自车在所行驶方向道路的相对位置. 最后用一句话描述当前场景并给出应对当前驾驶场景的驾驶建议. 每个维度信息都用key:value对形式表达. [/INST]',)
before self.sequence_length_buffer tensor([1], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([822], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([833], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([834], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([835], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([836], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([837], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([838], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([839], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([840], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([841], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([842], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([843], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([844], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([845], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([846], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([847], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([848], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([849], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([850], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([851], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([852], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([853], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([854], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([855], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([856], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([857], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([858], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([859], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([860], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([861], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([862], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([863], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([864], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([865], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([866], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([867], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([868], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([869], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([870], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([871], device='cuda:0', dtype=torch.int32)
self.total_time 0.0
total_time 1.4326179027557373
Step 6 : 2.589702844619751 s
Outputs: ['场景:[临时红绿灯];时间:无;道路类型:无;备选车道:[无,无,无];自车车道:无;临时红绿灯:是;文本:车辆未处于任何车道中;该路口设置了一个临时的交通灯. ']
outputs.numel(): 59
Total new token: tensor([[59]], device='cuda:0', dtype=torch.int32)
Avg acc len: 0
avg_acc_lens: 0.0
prompt: ('[INST] <image>\n你是一个能够分析理解各种复杂驾驶场景的智能驾驶系统.请根据图片从以下场景标签中选择所有符合当前场景的标签,满足条件的场景必须是对自车行车决策会产生影响的场景:[无灯路,坑洼路,泥泞路,事故,道路施工,临时红绿灯],场景标签可以有一个到多个,以列表形式表达,顺序无关.还要描述当前驾驶场景的时间,黑天或白天,描述道路类型,前方备选车道和自车所在的车道位置.备选车道代表自车可以变道的目标车道,以列表形式表达,顺序为左邻车道,自车车道,右邻车道,例如[无,普通,公交]代表前方没有左邻车道,自车车道是普通车道,右邻是公交车道. 自车所在车道分为左侧,中间,右侧,单车道,无,代表自车在所行驶方向道路的相对位置. 最后用一句话描述当前场景并给出应对当前驾驶场景的驾驶建议. 每个维度信息都用key:value对形式表达. [/INST]',)
before self.sequence_length_buffer tensor([1], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([821], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([832], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([833], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([834], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([835], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([836], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([837], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([838], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([839], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([840], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([841], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([842], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([843], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([844], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([845], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([846], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([847], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([848], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([849], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([850], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([851], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([852], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([853], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([854], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([855], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([856], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([857], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([858], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([859], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([860], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([861], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([862], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([863], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([864], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([865], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([866], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([867], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([868], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([869], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([870], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([871], device='cuda:0', dtype=torch.int32)
self.total_time 0.0
total_time 1.4815340042114258
Step 7 : 2.613034248352051 s
Outputs: ['场景:[无灯路];时间:无;道路类型:无;备选车道:[无,无,无];自车车道:无;文本:车辆未处于任何车道中;前方道路光线昏暗,车辆将慢速行驶,避免发生急刹. ']
outputs.numel(): 59
Total new token: tensor([[59]], device='cuda:0', dtype=torch.int32)
Avg acc len: 0
avg_acc_lens: 0.0
prompt: ('[INST] <image>\n你是一个能够分析理解各种复杂驾驶场景的智能驾驶系统.请根据图片从以下场景标签中选择所有符合当前场景的标签,满足条件的场景必须是对自车行车决策会产生影响的场景:[无灯路,坑洼路,泥泞路,事故,道路施工,临时红绿灯],场景标签可以有一个到多个,以列表形式表达,顺序无关.还要描述当前驾驶场景的时间,黑天或白天,描述道路类型,前方备选车道和自车所在的车道位置.备选车道代表自车可以变道的目标车道,以列表形式表达,顺序为左邻车道,自车车道,右邻车道,例如[无,普通,公交]代表前方没有左邻车道,自车车道是普通车道,右邻是公交车道. 自车所在车道分为左侧,中间,右侧,单车道,无,代表自车在所行驶方向道路的相对位置. 然后判断当前图片中是否存在临时红绿灯.最后用一句话描述当前场景并给出应对当前驾驶场景的驾驶建议. 每个维度信息都用key:value对形式表达. [/INST]',)
before self.sequence_length_buffer tensor([1], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([835], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([846], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([847], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([848], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([849], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([850], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([851], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([852], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([853], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([854], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([855], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([856], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([857], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([858], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([859], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([860], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([861], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([862], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([863], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([864], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([865], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([866], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([867], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([868], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([869], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([870], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([871], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([872], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([873], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([874], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([875], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([876], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([877], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([878], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([879], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([880], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([881], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([882], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([883], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([884], device='cuda:0', dtype=torch.int32)
self.total_time 0.0
total_time 1.4746849536895752
Step 8 : 2.5913498401641846 s
Outputs: ['场景:[临时红绿灯];时间:无;道路类型:无;备选车道:[无,无,无];自车车道:无;临时红绿灯:是;文本:车辆未处于任何车道中;该路口设置了一个临时的交通灯. ']
outputs.numel(): 59
Total new token: tensor([[59]], device='cuda:0', dtype=torch.int32)
Avg acc len: 0
avg_acc_lens: 0.0
prompt: ('[INST] <image>\n你是一个能够分析理解各种复杂驾驶场景的智能驾驶系统.请根据图片从以下场景标签中选择所有符合当前场景的标签,满足条件的场景必须是对自车行车决策会产生影响的场景:[无灯路,坑洼路,泥泞路,事故,道路施工,临时红绿灯],场景标签可以有一个到多个,以列表形式表达,顺序无关.还要描述当前驾驶场景的时间,黑天或白天,描述道路类型,前方备选车道和自车所在的车道位置.备选车道代表自车可以变道的目标车道,以列表形式表达,顺序为左邻车道,自车车道,右邻车道,例如[无,普通,公交]代表前方没有左邻车道,自车车道是普通车道,右邻是公交车道. 自车所在车道分为左侧,中间,右侧,单车道,无,代表自车在所行驶方向道路的相对位置. 最后用一句话描述当前场景并给出应对当前驾驶场景的驾驶建议. 每个维度信息都用key:value对形式表达. [/INST]',)
before self.sequence_length_buffer tensor([1], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([822], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([833], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([834], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([835], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([836], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([837], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([838], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([839], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([840], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([841], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([842], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([843], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([844], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([845], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([846], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([847], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([848], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([849], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([850], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([851], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([852], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([853], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([854], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([855], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([856], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([857], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([858], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([859], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([860], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([861], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([862], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([863], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([864], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([865], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([866], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([867], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([868], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([869], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([870], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([871], device='cuda:0', dtype=torch.int32)
self.total_time 0.0
total_time 1.443389654159546
Step 9 : 2.577347755432129 s
Outputs: ['场景:[临时红绿灯];时间:无;道路类型:无;备选车道:[无,无,无];自车车道:无;临时红绿灯:是;文本:车辆未处于任何车道中;该路口设置了一个临时的交通灯. ']
outputs.numel(): 59
Total new token: tensor([[59]], device='cuda:0', dtype=torch.int32)
Avg acc len: 0
avg_acc_lens: 0.0
prompt: ('[INST] <image>\n你是一个能够分析理解各种复杂驾驶场景的智能驾驶系统.请根据图片从以下场景标签中选择所有符合当前场景的标签,满足条件的场景必须是对自车行车决策会产生影响的场景:[无灯路,坑洼路,泥泞路,事故,道路施工,临时红绿灯],场景标签可以有一个到多个,以列表形式表达,顺序无关.还要描述当前驾驶场景的时间,黑天或白天,描述道路类型,前方备选车道和自车所在的车道位置.备选车道代表自车可以变道的目标车道,以列表形式表达,顺序为左邻车道,自车车道,右邻车道,例如[无,普通,公交]代表前方没有左邻车道,自车车道是普通车道,右邻是公交车道. 自车所在车道分为左侧,中间,右侧,单车道,无,代表自车在所行驶方向道路的相对位置. 最后用一句话描述当前场景并给出应对当前驾驶场景的驾驶建议. 每个维度信息都用key:value对形式表达. [/INST]',)
before self.sequence_length_buffer tensor([1], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([822], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([833], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([834], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([835], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([836], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([837], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([838], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([839], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([840], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([841], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([842], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([843], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([844], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([845], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([846], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([847], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([848], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([849], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([850], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([851], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([852], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([853], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([854], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([855], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([856], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([857], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([858], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([859], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([860], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([861], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([862], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([863], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([864], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([865], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([866], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([867], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([868], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([869], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([870], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([871], device='cuda:0', dtype=torch.int32)
self.total_time 0.0
total_time 1.2392923831939697
Step 10 : 2.1355323791503906 s
Outputs: ['场景:[临时红绿灯];时间:无;道路类型:无;备选车道:[无,无,无];自车车道:无;临时红绿灯:是;文本:车辆未处于任何车道中;该路口设置了一个临时的交通灯. ']
outputs.numel(): 59
Total new token: tensor([[59]], device='cuda:0', dtype=torch.int32)
Avg acc len: 0
avg_acc_lens: 0.0
prompt: ('[INST] <image>\n你是一个能够分析理解各种复杂驾驶场景的智能驾驶系统.请根据图片从以下场景标签中选择所有符合当前场景的标签,满足条件的场景必须是对自车行车决策会产生影响的场景:[无灯路,坑洼路,泥泞路,事故,道路施工,临时红绿灯],场景标签可以有一个到多个,以列表形式表达,顺序无关.还要描述当前驾驶场景的时间,黑天或白天,描述道路类型,前方备选车道和自车所在的车道位置.备选车道代表自车可以变道的目标车道,以列表形式表达,顺序为左邻车道,自车车道,右邻车道,例如[无,普通,公交]代表前方没有左邻车道,自车车道是普通车道,右邻是公交车道. 自车所在车道分为左侧,中间,右侧,单车道,无,代表自车在所行驶方向道路的相对位置. 然后判断当前图片中是否存在临时红绿灯.最后用一句话描述当前场景并给出应对当前驾驶场景的驾驶建议. 每个维度信息都用key:value对形式表达. [/INST]',)
before self.sequence_length_buffer tensor([1], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([833], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([844], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([845], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([846], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([847], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([848], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([849], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([850], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([851], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([852], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([853], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([854], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([855], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([856], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([857], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([858], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([859], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([860], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([861], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([862], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([863], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([864], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([865], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([866], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([867], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([868], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([869], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([870], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([871], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([872], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([873], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([874], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([875], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([876], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([877], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([878], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([879], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([880], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([881], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([882], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([883], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([884], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([885], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([886], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([887], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([888], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([889], device='cuda:0', dtype=torch.int32)
self.total_time 0.0
total_time 1.6210963726043701
Step 11 : 2.869364023208618 s
Outputs: ['场景:[道路施工];时间:白天;道路类型:无;备选车道:[无,普通,普通];自车车道:左侧;文本:车辆在左侧车道,可选择向右切换至邻近车道;前方的施工,车辆将慢速行驶的方式,避免急刹车. ']
outputs.numel(): 64
Total new token: tensor([[64]], device='cuda:0', dtype=torch.int32)
Avg acc len: 0
avg_acc_lens: 0.0
prompt: ('[INST] <image>\n你是一个能够分析理解各种复杂驾驶场景的智能驾驶系统.请根据图片从以下场景标签中选择所有符合当前场景的标签,满足条件的场景必须是对自车行车决策会产生影响的场景:[无灯路,坑洼路,泥泞路,事故,道路施工,临时红绿灯],场景标签可以有一个到多个,以列表形式表达,顺序无关.还要描述当前驾驶场景的时间,黑天或白天,描述道路类型,前方备选车道和自车所在的车道位置.备选车道代表自车可以变道的目标车道,以列表形式表达,顺序为左邻车道,自车车道,右邻车道,例如[无,普通,公交]代表前方没有左邻车道,自车车道是普通车道,右邻是公交车道. 自车所在车道分为左侧,中间,右侧,单车道,无,代表自车在所行驶方向道路的相对位置. 最后用一句话描述当前场景并给出应对当前驾驶场景的驾驶建议. 每个维度信息都用key:value对形式表达. [/INST]',)
before self.sequence_length_buffer tensor([1], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([821], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([832], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([833], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([834], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([835], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([836], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([837], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([838], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([839], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([840], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([841], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([842], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([843], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([844], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([845], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([846], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([847], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([848], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([849], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([850], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([851], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([852], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([853], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([854], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([855], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([856], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([857], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([858], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([859], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([860], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([861], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([862], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([863], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([864], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([865], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([866], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([867], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([868], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([869], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([870], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([871], device='cuda:0', dtype=torch.int32)
self.total_time 0.0
total_time 1.3778412342071533
Step 12 : 2.483067035675049 s
Outputs: ['场景:[无灯路];时间:无;道路类型:无;备选车道:[无,无,无];自车车道:无;文本:车辆未处于任何车道中;前方道路光线昏暗,车辆将慢速行驶,避免发生急刹. ']
outputs.numel(): 59
Total new token: tensor([[59]], device='cuda:0', dtype=torch.int32)
Avg acc len: 0
avg_acc_lens: 0.0
prompt: ('[INST] <image>\n你是一个能够分析理解各种复杂驾驶场景的智能驾驶系统.请根据图片从以下场景标签中选择所有符合当前场景的标签,满足条件的场景必须是对自车行车决策会产生影响的场景:[无灯路,坑洼路,泥泞路,事故,道路施工,临时红绿灯],场景标签可以有一个到多个,以列表形式表达,顺序无关.还要描述当前驾驶场景的时间,黑天或白天,描述道路类型,前方备选车道和自车所在的车道位置.备选车道代表自车可以变道的目标车道,以列表形式表达,顺序为左邻车道,自车车道,右邻车道,例如[无,普通,公交]代表前方没有左邻车道,自车车道是普通车道,右邻是公交车道. 自车所在车道分为左侧,中间,右侧,单车道,无,代表自车在所行驶方向道路的相对位置. 最后用一句话描述当前场景并给出应对当前驾驶场景的驾驶建议. 每个维度信息都用key:value对形式表达. [/INST]',)
before self.sequence_length_buffer tensor([1], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([819], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([830], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([831], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([832], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([833], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([834], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([835], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([836], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([837], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([838], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([839], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([840], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([841], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([842], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([843], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([844], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([845], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([846], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([847], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([848], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([849], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([850], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([851], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([852], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([853], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([854], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([855], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([856], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([857], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([858], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([859], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([860], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([861], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([862], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([863], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([864], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([865], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([866], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([867], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([868], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([869], device='cuda:0', dtype=torch.int32)
self.total_time 0.0
total_time 1.5319092273712158
Step 13 : 2.6049909591674805 s
Outputs: ['场景:[事故];时间:白天;道路类型:无;备选车道:[无,无,无];自车车道:无;文本:车辆未处于任何车道中;前方有事故发生,车辆将调整为慢速行驶模式,规避急减速. ']
outputs.numel(): 57
Total new token: tensor([[57]], device='cuda:0', dtype=torch.int32)
Avg acc len: 0
avg_acc_lens: 0.0
prompt: ('[INST] <image>\n你是一个能够分析理解各种复杂驾驶场景的智能驾驶系统.请根据图片从以下场景标签中选择所有符合当前场景的标签,满足条件的场景必须是对自车行车决策会产生影响的场景:[无灯路,坑洼路,泥泞路,事故,道路施工,临时红绿灯],场景标签可以有一个到多个,以列表形式表达,顺序无关.还要描述当前驾驶场景的时间,黑天或白天,描述道路类型,前方备选车道和自车所在的车道位置.备选车道代表自车可以变道的目标车道,以列表形式表达,顺序为左邻车道,自车车道,右邻车道,例如[无,普通,公交]代表前方没有左邻车道,自车车道是普通车道,右邻是公交车道. 自车所在车道分为左侧,中间,右侧,单车道,无,代表自车在所行驶方向道路的相对位置. 最后用一句话描述当前场景并给出应对当前驾驶场景的驾驶建议. 每个维度信息都用key:value对形式表达. [/INST]',)
before self.sequence_length_buffer tensor([1], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([819], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([830], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([831], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([832], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([833], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([834], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([835], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([836], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([837], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([838], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([839], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([840], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([841], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([842], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([843], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([844], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([845], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([846], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([847], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([848], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([849], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([850], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([851], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([852], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([853], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([854], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([855], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([856], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([857], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([858], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([859], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([860], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([861], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([862], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([863], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([864], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([865], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([866], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([867], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([868], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([869], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([870], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([871], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([872], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([873], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([874], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([875], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([876], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([877], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([878], device='cuda:0', dtype=torch.int32)
self.total_time 0.0
total_time 1.7482287883758545
Step 14 : 2.9829845428466797 s
Outputs: ['场景:[事故];时间:白天;道路类型:无;备选车道:[无,普通,普通];自车车道:左侧;文本:车辆位于左侧车道,可继续沿当前车道行驶或变道至右边的车道;前方发生事故,车辆将慢速行驶,避免急刹. ']
outputs.numel(): 66
Total new token: tensor([[66]], device='cuda:0', dtype=torch.int32)
Avg acc len: 0
avg_acc_lens: 0.0
prompt: ('[INST] <image>\n你是一个能够分析理解各种复杂驾驶场景的智能驾驶系统.请根据图片从以下场景标签中选择所有符合当前场景的标签,满足条件的场景必须是对自车行车决策会产生影响的场景:[无灯路,坑洼路,泥泞路,事故,道路施工,临时红绿灯],场景标签可以有一个到多个,以列表形式表达,顺序无关.还要描述当前驾驶场景的时间,黑天或白天,描述道路类型,前方备选车道和自车所在的车道位置.备选车道代表自车可以变道的目标车道,以列表形式表达,顺序为左邻车道,自车车道,右邻车道,例如[无,普通,公交]代表前方没有左邻车道,自车车道是普通车道,右邻是公交车道. 自车所在车道分为左侧,中间,右侧,单车道,无,代表自车在所行驶方向道路的相对位置. 最后用一句话描述当前场景并给出应对当前驾驶场景的驾驶建议. 每个维度信息都用key:value对形式表达. [/INST]',)
before self.sequence_length_buffer tensor([1], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([821], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([832], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([833], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([834], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([835], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([836], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([837], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([838], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([839], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([840], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([841], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([842], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([843], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([844], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([845], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([846], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([847], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([848], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([849], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([850], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([851], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([852], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([853], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([854], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([855], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([856], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([857], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([858], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([859], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([860], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([861], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([862], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([863], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([864], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([865], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([866], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([867], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([868], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([869], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([870], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([871], device='cuda:0', dtype=torch.int32)
self.total_time 0.0
total_time 1.3858497142791748
Step 15 : 2.441472053527832 s
Outputs: ['场景:[泥泞路];时间:无;道路类型:无;备选车道:[无,无,无];自车车道:无;文本:车辆未处于任何车道中;前方路面泥泞,车辆将选择慢速驾驶,有效避免颠簸. ']
outputs.numel(): 59
Total new token: tensor([[59]], device='cuda:0', dtype=torch.int32)
Avg acc len: 0
avg_acc_lens: 0.0
prompt: ('[INST] <image>\n你是一个能够分析理解各种复杂驾驶场景的智能驾驶系统.请根据图片从以下场景标签中选择所有符合当前场景的标签,满足条件的场景必须是对自车行车决策会产生影响的场景:[无灯路,坑洼路,泥泞路,事故,道路施工,临时红绿灯],场景标签可以有一个到多个,以列表形式表达,顺序无关.还要描述当前驾驶场景的时间,黑天或白天,描述道路类型,前方备选车道和自车所在的车道位置.备选车道代表自车可以变道的目标车道,以列表形式表达,顺序为左邻车道,自车车道,右邻车道,例如[无,普通,公交]代表前方没有左邻车道,自车车道是普通车道,右邻是公交车道. 自车所在车道分为左侧,中间,右侧,单车道,无,代表自车在所行驶方向道路的相对位置. 然后判断当前图片中是否存在临时红绿灯.最后用一句话描述当前场景并给出应对当前驾驶场景的驾驶建议. 每个维度信息都用key:value对形式表达. [/INST]',)
before self.sequence_length_buffer tensor([1], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([835], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([846], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([847], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([848], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([849], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([850], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([851], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([852], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([853], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([854], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([855], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([856], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([857], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([858], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([859], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([860], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([861], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([862], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([863], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([864], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([865], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([866], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([867], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([868], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([869], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([870], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([871], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([872], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([873], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([874], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([875], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([876], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([877], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([878], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([879], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([880], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([881], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([882], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([883], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([884], device='cuda:0', dtype=torch.int32)
self.total_time 0.0
total_time 1.5101203918457031
Step 16 : 2.573737382888794 s
Outputs: ['场景:[临时红绿灯];时间:无;道路类型:无;备选车道:[无,无,无];自车车道:无;临时红绿灯:是;文本:车辆未处于任何车道中;该路口设置了一个临时的交通灯. ']
outputs.numel(): 59
Total new token: tensor([[59]], device='cuda:0', dtype=torch.int32)
Avg acc len: 0
avg_acc_lens: 0.0
prompt: ('[INST] <image>\n你是一个能够分析理解各种复杂驾驶场景的智能驾驶系统.请根据图片从以下场景标签中选择所有符合当前场景的标签,满足条件的场景必须是对自车行车决策会产生影响的场景:[无灯路,坑洼路,泥泞路,事故,道路施工,临时红绿灯],场景标签可以有一个到多个,以列表形式表达,顺序无关.还要描述当前驾驶场景的时间,黑天或白天,描述道路类型,前方备选车道和自车所在的车道位置.备选车道代表自车可以变道的目标车道,以列表形式表达,顺序为左邻车道,自车车道,右邻车道,例如[无,普通,公交]代表前方没有左邻车道,自车车道是普通车道,右邻是公交车道. 自车所在车道分为左侧,中间,右侧,单车道,无,代表自车在所行驶方向道路的相对位置. 然后判断当前图片中是否存在临时红绿灯.最后用一句话描述当前场景并给出应对当前驾驶场景的驾驶建议. 每个维度信息都用key:value对形式表达. [/INST]',)
before self.sequence_length_buffer tensor([1], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([834], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([845], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([846], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([847], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([848], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([849], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([850], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([851], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([852], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([853], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([854], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([855], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([856], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([857], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([858], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([859], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([860], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([861], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([862], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([863], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([864], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([865], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([866], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([867], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([868], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([869], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([870], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([871], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([872], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([873], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([874], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([875], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([876], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([877], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([878], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([879], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([880], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([881], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([882], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([883], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([884], device='cuda:0', dtype=torch.int32)
self.total_time 0.0
total_time 1.5104918479919434
Step 17 : 2.61234188079834 s
Outputs: ['场景:[无灯路];时间:无;道路类型:无;备选车道:[无,无,无];自车车道:无;文本:车辆未处于任何车道中;前方道路光线昏暗,车辆将慢速行驶,避免发生急刹. ']
outputs.numel(): 59
Total new token: tensor([[59]], device='cuda:0', dtype=torch.int32)
Avg acc len: 0
avg_acc_lens: 0.0
prompt: ('[INST] <image>\n你是一个能够分析理解各种复杂驾驶场景的智能驾驶系统.请根据图片从以下场景标签中选择所有符合当前场景的标签,满足条件的场景必须是对自车行车决策会产生影响的场景:[无灯路,坑洼路,泥泞路,事故,道路施工,临时红绿灯],场景标签可以有一个到多个,以列表形式表达,顺序无关.还要描述当前驾驶场景的时间,黑天或白天,描述道路类型,前方备选车道和自车所在的车道位置.备选车道代表自车可以变道的目标车道,以列表形式表达,顺序为左邻车道,自车车道,右邻车道,例如[无,普通,公交]代表前方没有左邻车道,自车车道是普通车道,右邻是公交车道. 自车所在车道分为左侧,中间,右侧,单车道,无,代表自车在所行驶方向道路的相对位置. 然后判断当前图片中是否存在临时红绿灯.最后用一句话描述当前场景并给出应对当前驾驶场景的驾驶建议. 每个维度信息都用key:value对形式表达. [/INST]',)
before self.sequence_length_buffer tensor([1], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([834], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([845], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([846], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([847], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([848], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([849], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([850], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([851], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([852], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([853], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([854], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([855], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([856], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([857], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([858], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([859], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([860], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([861], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([862], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([863], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([864], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([865], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([866], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([867], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([868], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([869], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([870], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([871], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([872], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([873], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([874], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([875], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([876], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([877], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([878], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([879], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([880], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([881], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([882], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([883], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([884], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([885], device='cuda:0', dtype=torch.int32)
self.total_time 0.0
total_time 1.5603258609771729
Step 18 : 2.6604132652282715 s
Outputs: ['场景:[无灯路];时间:无;道路类型:无;备选车道:[无,无,无];自车车道:无;文本:车辆未处于任何车道中;道路光线不足,车辆将选择慢速前进,避免突发事件导致的急刹. ']
outputs.numel(): 60
Total new token: tensor([[60]], device='cuda:0', dtype=torch.int32)
Avg acc len: 0
avg_acc_lens: 0.0
prompt: ('[INST] <image>\n你是一个能够分析理解各种复杂驾驶场景的智能驾驶系统.请根据图片从以下场景标签中选择所有符合当前场景的标签,满足条件的场景必须是对自车行车决策会产生影响的场景:[无灯路,坑洼路,泥泞路,事故,道路施工,临时红绿灯],场景标签可以有一个到多个,以列表形式表达,顺序无关.还要描述当前驾驶场景的时间,黑天或白天,描述道路类型,前方备选车道和自车所在的车道位置.备选车道代表自车可以变道的目标车道,以列表形式表达,顺序为左邻车道,自车车道,右邻车道,例如[无,普通,公交]代表前方没有左邻车道,自车车道是普通车道,右邻是公交车道. 自车所在车道分为左侧,中间,右侧,单车道,无,代表自车在所行驶方向道路的相对位置. 然后判断当前图片中是否存在临时红绿灯.最后用一句话描述当前场景并给出应对当前驾驶场景的驾驶建议. 每个维度信息都用key:value对形式表达. [/INST]',)
before self.sequence_length_buffer tensor([1], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([834], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([845], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([846], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([847], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([848], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([849], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([850], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([851], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([852], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([853], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([854], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([855], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([856], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([857], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([858], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([859], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([860], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([861], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([862], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([863], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([864], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([865], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([866], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([867], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([868], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([869], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([870], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([871], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([872], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([873], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([874], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([875], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([876], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([877], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([878], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([879], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([880], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([881], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([882], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([883], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([884], device='cuda:0', dtype=torch.int32)
self.total_time 0.0
total_time 1.533250331878662
Step 19 : 2.6625354290008545 s
Outputs: ['场景:[无灯路];时间:无;道路类型:无;备选车道:[无,无,无];自车车道:无;文本:车辆未处于任何车道中;前方道路光线昏暗,车辆将慢速行驶,避免发生急刹. ']
outputs.numel(): 59
Total new token: tensor([[59]], device='cuda:0', dtype=torch.int32)
Avg acc len: 0
avg_acc_lens: 0.0
prompt: ('[INST] <image>\n你是一个能够分析理解各种复杂驾驶场景的智能驾驶系统.请根据图片从以下场景标签中选择所有符合当前场景的标签,满足条件的场景必须是对自车行车决策会产生影响的场景:[无灯路,坑洼路,泥泞路,事故,道路施工,临时红绿灯],场景标签可以有一个到多个,以列表形式表达,顺序无关.还要描述当前驾驶场景的时间,黑天或白天,描述道路类型,前方备选车道和自车所在的车道位置.备选车道代表自车可以变道的目标车道,以列表形式表达,顺序为左邻车道,自车车道,右邻车道,例如[无,普通,公交]代表前方没有左邻车道,自车车道是普通车道,右邻是公交车道. 自车所在车道分为左侧,中间,右侧,单车道,无,代表自车在所行驶方向道路的相对位置. 然后判断当前图片中是否存在临时红绿灯.最后用一句话描述当前场景并给出应对当前驾驶场景的驾驶建议. 每个维度信息都用key:value对形式表达. [/INST]',)
before self.sequence_length_buffer tensor([1], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([834], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([845], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([846], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([847], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([848], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([849], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([850], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([851], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([852], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([853], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([854], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([855], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([856], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([857], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([858], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([859], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([860], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([861], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([862], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([863], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([864], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([865], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([866], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([867], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([868], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([869], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([870], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([871], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([872], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([873], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([874], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([875], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([876], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([877], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([878], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([879], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([880], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([881], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([882], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([883], device='cuda:0', dtype=torch.int32)
before self.sequence_length_buffer tensor([884], device='cuda:0', dtype=torch.int32)
self.total_time 0.0
total_time 1.482041835784912
Step 20 : 2.575094699859619 s
Outputs: ['场景:[泥泞路];时间:无;道路类型:无;备选车道:[无,无,无];自车车道:无;文本:车辆未处于任何车道中;前方路面泥泞,车辆将选择慢速驾驶,有效避免颠簸. ']
outputs.numel(): 59
Total new token: tensor([[59]], device='cuda:0', dtype=torch.int32)
Avg acc len: 0
avg_acc_lens: 0.0
Total steps: 20
Batch size: 1
Input len: 821.1578947368421
Avg output len: tensor([[59.8947]], device='cuda:0')
Avg acc len: 0.0
Avg tokens / step: 1.0
Avg vit time: 0.024675118295769943
Avg total time: 2.6570412359739604
benchmark_steps: 19
BASE TPS: tensor([[1.8358e+08]], device='cuda:0')
TPS: tensor([[22.7532]], device='cuda:0')
